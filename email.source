---------------------------------------------------------------------------
--
-- email.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
--
-- Portions Copyright (c) 1996-2013, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- src/tutorial/email.source
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--	We are going to create a new type called 'email' which represents
--	email address.
--	A user-defined type must have an input and an output function, and
--	optionally can have binary input and output functions.  All of these
--	are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in _OBJWD_/email$DLSUFFIX
-- (we do not want to assume this is in the dynamic loader search path).
-- Look at $PWD/email.c for the source.  Note that we declare all of
-- them as STRICT, so we do not need to cope with NULL inputs in the
-- C code.  We also mark them IMMUTABLE, since they always return the
-- same outputs given the same inputs.

-- clean up the example
DROP TABLE test_email;
DROP TYPE email CASCADE;

-- the input function 'email_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'email'
-- does not exist yet but that's okay.


CREATE FUNCTION email_in(cstring)
   RETURNS email
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'email_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION email_out(email)
   RETURNS cstring
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary input function 'email_recv' takes a StringInfo buffer
-- and turns its contents into the internal representation.

CREATE FUNCTION email_recv(internal)
   RETURNS email
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary output function 'email_send' takes the internal representation
-- and converts it into a (hopefully) platform-independent bytea string.

CREATE FUNCTION email_send(email)
   RETURNS bytea
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;


-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need two 128 byte parts plus '@').

CREATE TYPE email (
   internallength = 257,
   input = email_in,
   output = email_out,
   receive = email_recv,
   send = email_send--,
   --alignment = cstring
);


-----------------------------
--The following is the test part

-----------------------------
-- Using the new type:
--	user-defined types can be used like ordinary built-in types.
-----------------------------

-- eg. we can use it in a table

CREATE TABLE test_email (
   a email,
   b email
);

-- data for user-defined types are just strings in the proper textual
-- representation.

INSERT INTO test_email VALUES ('ashnh@hotmail.com', 'kenzoEVE@zmail.unsw.edu.au');
INSERT INTO test_email VALUES ('ashnh633-2014@mail.com', 'kenzoEVE@163.com');

SELECT * FROM test_email;

-----------------------------
-- Interfacing New Types with Indexes:
--	We cannot define a secondary index (eg. a B-tree) over the new type
--	yet. We need to create all the required operators and support
--      functions, then we can make the operator class.
-----------------------------

-- first, define the required operators
CREATE FUNCTION email_abs_lt(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_le(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_eq(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_ge(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_gt(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_ne(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_same_domain(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_not_same_domain(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR < (
   leftarg = email, rightarg = email, procedure = email_abs_lt,
   commutator = > , negator = >= ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR <= (
   leftarg = email, rightarg = email, procedure = email_abs_le,
   commutator = >= , negator = > ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR = (
   leftarg = email, rightarg = email, procedure = email_abs_eq,
   commutator = = , negator = <> ,
   restrict = eqsel, join = eqjoinsel ,
   HASHES
);
CREATE OPERATOR >= (
   leftarg = email, rightarg = email, procedure = email_abs_ge,
   commutator = <= , negator = < ,
   restrict = scalargtsel, join = scalargtjoinsel
);
CREATE OPERATOR > (
   leftarg = email, rightarg = email, procedure = email_abs_gt,
   commutator = < , negator = <= ,
   restrict = scalargtsel, join = scalargtjoinsel
);
CREATE OPERATOR <> (
   leftarg = email, rightarg = email, procedure = email_abs_ne,
   commutator = <> , negator = = ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR ~ (
   leftarg = email, rightarg = email, procedure = email_abs_ne,
   commutator = ~ , negator = !~ ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR !~ (
   leftarg = email, rightarg = email, procedure = email_abs_ne,
   commutator = !~ , negator = ~ ,
   restrict = eqsel, join = eqjoinsel
);

-- create the support function too
CREATE FUNCTION email_abs_cmp(email, email) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

-- now we can make the operator class
-------------------------Only 5 operators can be generated, careful!!!!------------
CREATE OPERATOR CLASS email_abs_ops
    DEFAULT FOR TYPE email USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       email_abs_cmp(email, email);


-- now, we can define a btree index on email types. First, let's populate
-- the table. Note that postgres needs many more tuples to start using the
-- btree index during selects.
INSERT INTO test_email VALUES ('aaa@bbb.com', 'abc@cde.com');
INSERT INTO test_email VALUES ('EFG@GHI.com', 'AAAAAAAA@BBBBBB.CC');

CREATE INDEX test_cplx_ind ON test_email
   USING btree(a email_abs_ops);

SELECT * from test_email where a = 'ashnh@hotmail.com';
SELECT * from test_email where a < 'ashnh@hotmail.com';
SELECT * from test_email where a > 'ashnh@hotmail.com';

