---------------------------------------------------------------------------
--
-- email.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
--
-- Portions Copyright (c) 1996-2013, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- src/tutorial/email.source
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--  We are going to create a new type called 'email' which represents
--  email address.
--  A user-defined type must have an input and an output function, and
--  optionally can have binary input and output functions.  All of these
--  are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in /Users/mia/source/code/postgresql-9.3.4/src/tutorial/email$DLSUFFIX
-- (we do not want to assume this is in the dynamic loader search path).
-- Look at $PWD/email.c for the source.  Note that we declare all of
-- them as STRICT, so we do not need to cope with NULL inputs in the
-- C code.  We also mark them IMMUTABLE, since they always return the
-- same outputs given the same inputs.

-- clean up the example
DROP TABLE test_email;
DROP TYPE EmailAddress CASCADE;

-- the input function 'email_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'email'
-- does not exist yet but that's okay.


CREATE FUNCTION email_in(cstring)
   RETURNS EmailAddress
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'email_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION email_out(EmailAddress)
   RETURNS cstring
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary input function 'email_recv' takes a StringInfo buffer
-- and turns its contents into the internal representation.

CREATE FUNCTION email_recv(internal)
   RETURNS EmailAddress
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary output function 'email_send' takes the internal representation
-- and converts it into a (hopefully) platform-independent bytea string.

CREATE FUNCTION email_send(EmailAddress)
   RETURNS bytea
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email'
   LANGUAGE C IMMUTABLE STRICT;


-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need two 128 byte parts plus '@').

CREATE TYPE EmailAddress (
   internallength = 257,
   input = email_in,
   output = email_out,
   receive = email_recv,
   send = email_send,
   alignment = char
);


-----------------------------
--The following is the test part

-----------------------------
-- Using the new type:
--  user-defined types can be used like ordinary built-in types.
-----------------------------

-- eg. we can use it in a table

CREATE TABLE test_email (
   a EmailAddress,
   b EmailAddress
);

-- data for user-defined types are just strings in the proper textual
-- representation.

INSERT INTO test_email VALUES ('ashnh@hotmail.com', 'kenzoEVE@zmail.unsw.edu.au');
INSERT INTO test_email VALUES ('ashnh633-2014@mail.com', 'kenzoEVE@163.com');
INSERT INTO test_email VALUES ('ashnh@mail.com', 'k633@zmail.unsw.edu.au');

SELECT * FROM test_email;

-----------------------------
-- Interfacing New Types with Indexes:
--  We cannot define a secondary index (eg. a B-tree) over the new type
--  yet. We need to create all the required operators and support
--      functions, then we can make the operator class.
-----------------------------

-- first, define the required operators
CREATE FUNCTION email_abs_lt(EmailAddress, EmailAddress) RETURNS bool
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_le(EmailAddress, EmailAddress) RETURNS bool
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_eq(EmailAddress, EmailAddress) RETURNS bool
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_ge(EmailAddress, EmailAddress) RETURNS bool
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_gt(EmailAddress, EmailAddress) RETURNS bool
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_ne(EmailAddress, EmailAddress) RETURNS bool
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_same_domain(EmailAddress, EmailAddress) RETURNS bool
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_abs_not_same_domain(EmailAddress, EmailAddress) RETURNS bool
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR < (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_abs_lt,
   commutator = > , negator = >= ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR <= (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_abs_le,
   commutator = >= , negator = > ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR = (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_abs_eq,
   commutator = = , negator = <> ,
   restrict = eqsel, join = eqjoinsel ,
   HASHES
);
CREATE OPERATOR >= (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_abs_ge,
   commutator = <= , negator = < ,
   restrict = scalargtsel, join = scalargtjoinsel
);
CREATE OPERATOR > (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_abs_gt,
   commutator = < , negator = <= ,
   restrict = scalargtsel, join = scalargtjoinsel
);
CREATE OPERATOR <> (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_abs_ne,
   commutator = <> , negator = = ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR ~ (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_abs_same_domain,
   commutator = ~ , negator = !~ ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR !~ (
   leftarg = EmailAddress, rightarg = EmailAddress, procedure = email_abs_not_same_domain,
   commutator = !~ , negator = ~ ,
   restrict = eqsel, join = eqjoinsel
);

-- create the support function too
CREATE FUNCTION email_abs_cmp(EmailAddress, EmailAddress) RETURNS int4
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email' LANGUAGE C IMMUTABLE STRICT;

-- now we can make the operator class
-------------------------Only 5 operators can be generated, careful!!!!------------
CREATE OPERATOR CLASS email_abs_ops
    DEFAULT FOR TYPE EmailAddress USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       email_abs_cmp(EmailAddress, EmailAddress);


-- now, we can define a btree index on email types. First, let's populate
-- the table. Note that postgres needs many more tuples to start using the
-- btree index during selects.
INSERT INTO test_email VALUES ('aaa@bbb.com', 'abc@cde.com');
INSERT INTO test_email VALUES ('EFG@GHI.com', 'AAAAAAAA@BBBBBB.CC');
INSERT INTO test_email VALUES ('EFG@hotmail.com', 'AAAAAAAA@hotmail.com');

CREATE INDEX test_email_ind ON test_email
   USING btree(a email_abs_ops);

SELECT * from test_email where a = 'ashnh@hotmail.com';
SELECT * from test_email where a < 'ashnh@hotmail.com';
SELECT * from test_email where a > 'ashnh@hotmail.com';

--test for the ~ and !~ operators.
SELECT * from test_email where a ~ b;
select * from test_email where a ~ 'xxx@mail.com';
select * from test_email where b !~ 'x@zmail.unsw.edu.au';


--Some tests for hash functons.

create table UserSessions (
   username  EmailAddress,
   loggedIn  timestamp,
   loggedOut timestamp
   -- etc. etc.
);

insert into UserSessions(username,loggedIn,loggedOut) values
('jas@cse.unsw.edu.au','2012-07-01 15:45:55','2012-07-01 15:51:20'),
('jas@cse.unsw.EDU.AU','2012-07-01 15:50:30','2012-07-01 15:53:15'),
('z9987654@unsw.edu.au','2012-07-01 15:51:10','2012-07-01 16:01:05'),
('m.mouse@disney.com','2012-07-01 15:51:11','2012-07-01 16:01:06'),
('a-user@fast-money.com','2012-07-01 15:52:25','2012-07-01 16:10:15')
;
--(...XXX..)

-- create the support function too
CREATE FUNCTION pjw(EmailAddress) RETURNS int4
   AS '/Users/mia/source/code/postgresql-9.3.4/src/tutorial/email' LANGUAGE C IMMUTABLE STRICT;

-- now we can make the operator class
-------------------------Only 5 operators can be generated, careful!!!!------------
CREATE OPERATOR CLASS email_abs_ops
    DEFAULT FOR TYPE EmailAddress USING hash AS
        OPERATOR        1       = ,
        FUNCTION        1       pjw(EmailAddress);


create index on UserSessions using hash (username);

select a.username, a.loggedIn, b.loggedIn
from   UserSessions a, UserSessions b
where  a.username = b.username and a.loggedIn <> b.loggedIn;

select count(*)
from   UserSessions;
--group  by path;
drop table UserSessions;
